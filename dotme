#!/usr/bin/env bash
# $KYAULabs: dotme,v 2.1.2 2021/07/10 11:14:39 kyau Exp $

# Configuration {{{
# location of dotfiles repository
#repo=git@github.com:kyau/dotfiles.git
repo=https://github.com/kyau/dotfiles.git
# folder the repo will be stored in (~/$repofolder)
repo_folder="dot"
# package installer
pkgman="pikaur"
# configs in the root directory
root_files=( "bash_profile" "bashrc" "gitconfig" "ssh/config" "ssh/authorized_keys" "tmux.conf" "vimrc" )
# xorg configs in the root directory
root_files_xorg=( "Xmodmap" "Xresources" "xbindkeysrc" "xinitrc" )
# directories in the root directory
root_dir=( "bash.d" "irssi" "tmux" "vim" )
# xorg directories in the root directory
root_dir_xorg=( "ncmpcpp" )
# configs inside ~/.config/
config_files=( "starship.toml" )
# xorg configs inside ~/.config/
config_files_xorg=( "compton.conf" )
# directories inside ~/.config/
config_dir=( "fish" "htop" "ranger" )
# xorg directories inside ~/.config/
config_dir_xorg=( "ckb-next" "i3" "mpd" "mpv" "polybar" "vis" )
# }}}
# CONFIG DONE ~ DO NOT EDIT BELOW THIS LINE!
# here_be_dragons() {{{
function here_be_dragons() {
	if [ -z "$1" ]; then return 0; fi
	if [ -z "$2" ]; then local s=; else local s=$2; fi
	if [ -z "$3" ]; then local dot=; else local dot=$3; fi
	if [ -e "${destination}${s}/${dot}${1}" ]; then
		if [ "${destination}${s}/${dot}${1}" == "${HOME}/.ssh" ]; then
			printf "symlink: ignore: %s%s/%s%s\\n" "${destination}" "${s}" "${dot}" "${1}" >> "${destination}/${log}"
		else
			if [ -h "${destination}${s}/${dot}${1}" ]; then
				if [ "$debug" == "1" ]; then
					printf "\\n	\\x1b[31m \\uf057 \\x1b[0m ~%s/%s%s \\x1b[1;30m(current sym-link will be deleted)\\x1b[0m" "${s}" "${dot}" "${1}"
				else
					printf "symlink: delete: %s%s/%s%s\\n" "${destination}" "${s}" "${dot}" "${1}" >> "${destination}/${log}"
					/bin/rm "${destination}${s}/${dot}${1}"
				fi
			else
				if [ "$debug" == "1" ]; then
					printf "\\n	\\x1b[1;34m \\ue706 \\x1b[0m ~%s/%s%s \\x1b[1;30m(backup: ~%s/%s.ibk)\\x1b[0m" "${s}" "${dot}" "${1}" "${s}" "${1}"
				else
					printf "symlink: backup: %s%s/%s%s.ibk\\n" "${destination}" "${s}" "${dot}" "${1}" >> "${destination}/${log}"
					/bin/mv "${destination}${s}/${dot}${1}" "${destination}${s}/${1//\//_}.ibk"
				fi
			fi
		fi
	fi
	if [ "$s" == "/.config" ]; then
		local t=/config
	else
		local t=$s
	fi
	if [ -e "${HOME}/${repo_folder}${t}/${1}" ]; then
		if [ "$debug" == "1" ]; then
			printf "\\n	\\x1b[1;36m \\uf064 \\x1b[0m %s%s/%s \\x1b[1;37m \\uf061 \\x1b[0m ~%s/%s%s" "${repo_folder}" "${t}" "${1}" "${s}" "${dot}" "${1}"
		else
			/bin/ln -s "${HOME}/${repo_folder}${t}/${1}" "${destination}${s}/${dot}${1}"
			printf "symlink: create: %s%s/%s -> %s/%s%s\\n" "${repo_folder}" "${t}" "${1}" "${s}" "${dot}" "${1}" >> "${destination}/${log}"
		fi
	else
		printf "\\n		\\x1b[31mERROR: \\x1b[1;37m~/%s%s/%s \\x1b[0mnot found\\x1b[0m" "${repo_folder}" "${t}" "${1}"
		printf "! symlink: ERROR: ~/%s%s/%s not found\\n" "${repo_folder}" "${t}" "${1}" >> "${destination}/${log}"
		testpass=0
	fi
}
# }}}
# symlink_master() {{{
function symlink_master() {
	local tmparr=()
	dest=
	local directory=0
	local dot=
	case "$1" in
		root_files)
			tmparr=("${root_files[@]}")
			dot=.
			;;
		root_files_xorg)
			tmparr=("${root_files_xorg[@]}")
			dot=.
			;;
		root_dir)
			tmparr=("${root_dir[@]}")
			dot=.
			directory=1
			;;
		root_dir_xorg)
			tmparr=("${root_dir_xorg[@]}")
			dot=.
			directory=1
			;;
		config_files)
			tmparr=("${config_files[@]}")
			dest=/.config
			;;
		config_files_xorg)
			tmparr=("${config_files_xorg[@]}")
			dest=/.config
			;;
		config_dir)
			tmparr=("${config_dir[@]}")
			dest=/.config
			directory=1
			;;
		config_dir_xorg)
			tmparr=("${config_dir_xorg[@]}")
			dest=/.config
			directory=1
			;;
		*)
			return 0
			;;
	esac
	if [ "$directory" == "0" ]; then
		for file in "${tmparr[@]}"; do
			here_be_dragons "$file" "$dest" "$dot"
		done
	elif [ "$directory" == "1" ]; then
		for dir in "${tmparr[@]}"; do
			here_be_dragons "$dir" "$dest" "$dot"
		done
	fi
}
# }}}
# gitclone() {{{
function gitclone() {
	printf "\\x1b[1;30m \\uf141 \\x1b[0m \\x1b[37m%sCloning repository\\x1b[0m " "${testing}"
	if [ -d "${HOME}/${repo_folder}" ]; then
		if [ "$debug" == "1" ]; then printf "\\n  "; fi
		printf "\\x1b[1;33m \\uf12a \\x1b[0m "
		if [ "$debug" == "1" ]; then
			printf "%s/%s \\x1b[1;30m(directory exists)\\x1b[0m\\n" "${HOME}" "${repo_folder}"
		else
			printf "\\n"
		fi
		printf "! download: WARNING: %s already exists\\n" "${repo_folder}" >> "${destination}/${log}"
		testpass=0
	else
		if git clone --quiet ${repo} "${HOME}/${repo_folder}" | sed 's/^/\t/' >> "${destination}/${log}"; then
		#if [ $? -eq 0 ]; then
			printf "\\x1b[1;32m \\uf00c \\x1b[0m\\n"
		else
			printf "\\x1b[31m \\uf00d \\x1b[0m\\n"
		fi
	fi
	if [ "$debug" == "1" ]; then
		printf "	\\x1b[0;37m Test "
		if [ "$testpass" == "1" ]; then
			printf "\\x1b[1;32mPass  \\uf00c \\x1b[0m\\n"
		else
			printf "Fail \\x1b[31m \\uf00d \\x1b[0m\\n"
		fi
	fi
	cd "${HOME}/${repo_folder}" || exit 1
	testpass=1
}
# }}}
# symlink() {{{
function symlink() {
	printf "\\x1b[1;30m \\uf141 \\x1b[0m \\x1b[37m%sLink configs\\x1b[0m " "${testing}"
	printf "symlink: creating symbolic links...\\n" >> "${destination}/${log}"
	if [ ! -d "${destination}/.config/" ]; then
		if [ "$debug" == "1" ]; then
			printf "\\n	\\x1b[1;36m \\uf067 \\x1b[0m ~/.config \\x1b[1;30m(mkdir)\\x1b[0m"
		else
			/bin/mkdir "${destination}/.config"
		fi
	fi
	symlink_master root_files
	symlink_master root_dir
	symlink_master config_files
	symlink_master config_dir
	if [ "$1" == "1" ]; then
		symlink_master root_files_xorg
		symlink_master root_dir_xorg
		symlink_master config_files_xorg
		symlink_master config_dir_xorg
	fi
	if [ "$debug" == "1" ]; then printf "\\n \\x1b[0;37m Test "; fi
	if [ "$testpass" == "1" ]; then printf "Pass \\x1b[1;32m \\uf00c \\x1b[0m\\n"; else printf "Fail \\x1b[31m \\uf00d \\x1b[0m\\n"; fi
	testpass=1
}
# }}}
# bindir() {{{
function bindir() {
	printf "\\x1b[1;30m \\uf141 \\x1b[0m \\x1b[37m%sLink bin\\x1b[0m " "${testing}"
	if [ -e "${destination}/bin" ]; then
		if [ -h "${destination}/bin" ]; then
			if [ "$debug" == "1" ]; then
				printf "\\n	\\x1b[31m \\uf057 \\x1b[0m ~/bin \\x1b[1;30m(current sym-link will be deleted)\\x1b[0m"
			else
				printf "bin: delete: %s/bin\\n" "${destination}" >> "${destination}/${log}"
				/bin/rm "${destination}/bin"
			fi
		else
			if [ "$debug" == "1" ]; then
				printf "\\n	\\x1b[1;34m \\ue706 \\x1b[0m ~/bin \\x1b[1;30m(backup: ~/bin.ibk)\\x1b[0m"
			else
				printf "bin: backup: %s/bin\\n" "${destination}" >> "${destination}/${log}"
				/bin/mv "${destination}/bin" "${destination}/bin.ibk"
			fi
		fi
	fi

	if [ -d "${HOME}/$repo_folder/bin" ]; then
		if [ "$debug" == "1" ]; then 
			printf "\\n \\x1b[0;37m Test "
			printf "Pass \\x1b[1;32m \\uf00c \\x1b[0m\\n"
		else
			/bin/ln -s "${HOME}/${repo_folder}/bin" "$destination/bin"
			printf "\\x1b[1;32m \\uf00c \\x1b[0m\\n"
		fi
	else
		printf "\\n		\\x1b[31mERROR: \\x1b[1;37m~/%s/bin\\x1b[0m not found" "${repo_folder}"
		printf "! symlink: ERROR: ~/%s/bin not found\\n" "${repo_folder}" >> "${destination}/${log}"
		if [ "$debug" == "1" ]; then 
			printf "\\n \\x1b[0;37m Test "
			printf "Fail \\x1b[31m \\uf00d \\x1b[0m\\n"
		fi
	fi
}
# }}}
# install() {{{
function install() {
	testpass=1
	if [ -z "$1" ]; then return 0; fi
	printf "\\x1b[1;30m \\uf141 \\x1b[0m \\x1b[37m%sInstalling packages\\x1b[0m " "${testing}"
	if [ -f "${HOME}/${repo_folder}/.pkg-${1}" ]; then
		IFS=$'\n' read -d '' -r -a pkglist < "$HOME/$repo_folder/.pkg-$1"
		if [ ${#pkglist[@]} -eq 0 ]; then
			printf " \\x1b[1;33m \\uf12a \\x1b[0m No packages detected\\n"
		else
			if [ "$debug" == "1" ]; then
				printf "\\n \\x1b[0m Verifying packages:\\x1b[0m "
			else
				printf "\\n \\x1b[0m Installing packages:\\x1b[0m "
			fi
			local first=1
			for pkg in "${pkglist[@]}"; do
				pkgc=
				if [ "${pkg:0:1}" == "#" ]; then continue; fi
				#if [ "$first" == "1" ]; then
				#	printf "\x1b[1;30m%s\x1b[0m" "${pkg}"
				#else
				#	printf ", \x1b[1;30m%s\x1b[0m" "${pkg}"
				#fi
				if [ "$debug" == "1" ]; then
					local pacman=0
					local aur=0
					if pacman -Ssq "$pkg" | grep "^$pkg$" > /dev/null; then
					#if [ $? -eq 0 ]; then
						pacman=1
					else
						pacman=0
					fi
					if [ "$pacman" == "0" ]; then
						if git ls-remote -q --exit-code "https://aur.archlinux.org/$pkg.git" > /dev/null; then
						#if [ $? -eq 0 ]; then
							aur=1
						else
							aur=0
						fi
					fi
					if [ "$pacman" == "1" ] || [ "$aur" == "1" ]; then
						pkgc="\\x1b[0;36m"
					else
						pkgc="\\x1b[0;31m"
						testpass=0
					fi
				else
					#if yes 2>/dev/null | $pkgman -Sq "$pkg" --noconfirm > /dev/null; then

					if $pkgman -S "$pkg" --noedit --nodiff --noconfirm > /dev/null 2>&1; then
					#if [ $? -eq 0 ]; then
						pkgc="\\x1b[0;36m"
						printf "pkg: install: %s installed\\n" "${pkg}" >> "${destination}/${log}"
					else
						pkgc="\\x1b[0;31m"
						testpass=0
						printf "pkg: ERROR: %s failed install\\n" "${pkg}" >> "${destination}/${log}"
					fi
				fi
				if [ "$first" == "1" ]; then
					first=0
				else
					printf "\\x1b[0m, "
					if [ "$debug" == "1" ] && [ "$aur" == "1" ]; then printf "%saur:" "${pkgc}"; fi
				fi
					#printf "%s%s\\x1b[0m" "${pkgc}" "${pkg}"
					printf "${pkgc}%s\\x1b[0m" "${pkg}"
			done
		fi
	else
		printf "\\n		\\x1b[31mERROR: \\x1b[1;37m~/%s/.pkg-%s\\x1b[0m not found" "${repo_folder}" "${1}"
		printf "pkg: ERROR: ~/%s/.pkg-%s not found\\n" "${repo_folder}" "${1}" >> "${destination}/${log}"
	fi
	if [ "$debug" == "1" ]; then 
		printf "\\n \\x1b[0;37m Test "
		if [ "$testpass" == "1" ]; then
			printf "Pass \\x1b[1;32m \\uf00c \\x1b[0m\\n"
		else
			printf "Fail \\x1b[31m \\uf00d \\x1b[0m\\n"
		fi
	fi
}
# }}}
# fish() {{{
function fish() {
	printf "  Finish installing \\x1b[0;36mfish\\x1b[0m:\\n"
	printf "	* chsh -s /usr/bin/fish\\n"
	printf "	* fish\\n"
	printf "	* curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher\\n"
	printf "	* fisher\\n"
	printf "    * git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\\n"
	printf "    * git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\\n\\n"
	printf "	* sh -c \"\$(curl -fsSL https://starship.rs/install.sh)\"\\n\\n"
}
# }}}
# show_help() {{{
# display usage if no arguments
function show_help() {
	printf "Usage: %s [OPTION]...\\n" "${0}"
	printf "Initiate the user environment. Does nothing with no OPTION.\\n"
	printf "  -i\\t\\tinstall user packages (.pkg-<profile>)\\n"
	printf "  -p <profile>\\tuser environment profile\\n"
	printf "  -t\\t\\tdebug mode: runs tests, informational only does not do anything\\n"
	printf "  -x\\t\\tinclude Xorg apps/configs (applies to -i and -s)\\n"
	printf "  -h\\t\\tdisplay this help and exit\\n\\n"
}
# }}}
# main() {{{
debug=0
log=install.log
destination=${HOME}
doinstall=0
testing=
testpass=1
xorg=0
if ! git --version >/dev/null 2>&1; then
#if [ ! $? -eq 0 ]; then
	printf "\\x1b[1;33m \\uf12a \\x1b[1;37m dotme\\x1b[0m requires \\x1b[1;36mgit\\x1b[0m.\\n"
	exit 1
fi
# check for arguments
if [ $# -eq 0 ] ; then
	show_help
	exit 1
fi
# parse arguments
while getopts hip:tx opt; do
	case "$opt" in
		t) debug=1;;
		i) doinstall=1;;
		p) profile=$OPTARG;;
		x) xorg=1;;
		h|\?|:|*) show_help; exit 1;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$profile" ]; then echo "You must specify a profile."; exit 1; fi

if [ ! -f "${destination}/${log}" ]; then
	touch "${destination}/${log}"
fi

if [ "$debug" == "1" ]; then
	testing=$(printf "\\x1b[1;35mRunning Test:\\x1b[0m ")
	printf "\\x1b[1;35m \\ue00a  Test Mode!\\x1b[0m\\n"
fi
printf "\\x1b[1;36m \\uf011 \\x1b[0m \\x1b[37mEnvironment:\\x1b[1;33m %s\\x1b[0m\\n" "${profile}"
gitclone; bindir
symlink "${xorg}"
if [ "$doinstall" == "1" ]; then install "${profile}"; fish; fi
# }}}

# vim: ft=bash sts=4 sw=4 ts=4 noet:
